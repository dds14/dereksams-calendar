{"version":3,"sources":["Components/Calendar/Calendar.js","Components/Display/Display.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentMonth","Date","selectedDate","MaxDays","setState","props","StartDate","react_default","a","createElement","className","dateFns","format","days","startDate","startOfWeek","i","push","key","addDays","_this2","_this$state","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","formattedDate","Count","Finished","_loop","cloneDay","formattedCloneDay","holidayCloneDay","concat","isSameMonth","isSameDay","startsWith","includes","onClick","onDateClick","parse","renderHeader","renderDays","renderCells","React","Component","Display","NumberOfDays","e","console","log","target","value","Calendars","result","Start","RemainingDays","differenceInCalendarDays","addMonths","defaultValue","onBlur","DateChange","bind","MaxDateChange","map","A","Calendar_Calendar_Calendar","App","Display_Display_Display","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.343ea32f.chunk.js","sourcesContent":["import React from \"react\";\nimport dateFns from \"date-fns\";\nimport \"./Calendar.css\";\n\nexport default class Calendar extends React.Component {\n  constructor() {\n    super();\n  }\n\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n    MaxDays: 1\n  };\n\n  componentDidMount() {\n    this.setState({\n      currentMonth: this.props.StartDate,\n      MaxDays: this.props.MaxDays\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.state.currentMonth !== this.props.StartDate)\n      this.setState({ currentMonth: this.props.StartDate });\n    if (this.state.MaxDays !== this.props.MaxDays)\n      this.setState({ MaxDays: this.props.MaxDays });\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM YYYY\";\n    return (\n      <div>\n        <div className=\"col col-start\" />\n        <div className=\"col col-center\">\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n        </div>\n        <div className=\"col col-end\" />\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"dddd\";\n    const days = [];\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n        </div>\n      );\n    }\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderCells() {\n    const StartDate = this.props.StartDate;\n    const { currentMonth, selectedDate } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const dateFormat = \"D\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n    let Count = 0;\n    let Finished = false;\n    while (day <= endDate) {\n      if (Finished) break;\n      for (let i = 0; i < 7; i++) {\n        if (day >= StartDate) Count++;\n        if (Count > this.state.MaxDays) {\n          Finished = true;\n          break;\n        }\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        const formattedCloneDay = dateFns.format(cloneDay, \"dddd\");\n        const holidayCloneDay = dateFns.format(cloneDay, \"MM/DD\");\n        days.push(\n          <div\n            className={`col cell ${\n              !dateFns.isSameMonth(day, monthStart) || day < StartDate\n                ? \"disabled\"\n                : dateFns.isSameDay(day, selectedDate)\n                ? \"selected\"\n                : formattedCloneDay.startsWith(\"S\")\n                ? \"weekend\"\n                : holidayCloneDay.includes(\"01/01\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"07/04\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"12/31\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"12/25\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"05/27\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"09/02\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"10/31\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"11/11\")\n                ? \"holiday\"\n                : holidayCloneDay.includes(\"1/21\")\n                ? \"holiday\"\n                : \"weekday\"\n            }`}\n            key={day}\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n          >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n          </div>\n        );\n        day = dateFns.addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport dateFns from \"date-fns\";\nimport Calendar from \"../Calendar/Calendar\";\nimport \"./Display.css\";\n\nexport default class Display extends React.Component {\n  state = {\n    StartDate: \"03/7/2018\",\n    NumberOfDays: 5\n  };\n\n  async DateChange(e) {\n    console.log(e);\n    await this.setState({ StartDate: e.target.value });\n  }\n\n  async MaxDateChange(e) {\n    console.log(e);\n    await this.setState({ NumberOfDays: e.target.value });\n  }\n\n  render() {\n    let Calendars = [];\n    var result = dateFns.addDays(this.state.StartDate, this.state.NumberOfDays);\n    let Start = new Date(this.state.StartDate);\n    while (result >= Start) {\n      Calendars.push({\n        StartDate: Start,\n        RemainingDays: dateFns.differenceInCalendarDays(result, Start)\n      });\n      Start = dateFns.addMonths(Start, 1);\n    }\n\n    console.log(<Calendars />);\n    return (\n      <div>\n        Start Date:{\" \"}\n        <input\n          defaultValue={\"03/07/2018\"}\n          onBlur={this.DateChange.bind(this)}\n        />\n        Number Of Days:{\" \"}\n        <input\n          defaultValue={this.state.NumberOfDays}\n          onBlur={this.MaxDateChange.bind(this)}\n        />\n        Country Code\n        <input />\n        {Calendars.map(A => {\n          return (\n            <Calendar\n              MaxDays={A.RemainingDays}\n              StartDate={new Date(A.StartDate)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Display from \"./Components/Display/Display\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Display />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}